package pruebas;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.time.LocalTime;

// ============ ENUMS Y ESTRUCTURAS ============

enum Genero {
    MASCULINO, FEMENINO, OTRO
}

enum TipoHistorial {
    CONSULTA, EXAMEN, OPERACION, INTERVENCION
}

enum TipoInfraestructura {
    HABITACION, QUIROFANO, CONSULTORIO
}

// Clase para representar imágenes médicas
class Imagen {
    private String nombre;
    private String ruta;
    private Date fecha;
    
    public Imagen(String nombre, String ruta, Date fecha) {
        this.nombre = nombre;
        this.ruta = ruta;
        this.fecha = fecha;
    }
    
    // Getters y setters
    public String getNombre() { return nombre; }
    public void setNombre(String nombre) { this.nombre = nombre; }
    public String getRuta() { return ruta; }
    public void setRuta(String ruta) { this.ruta = ruta; }
    public Date getFecha() { return fecha; }
    public void setFecha(Date fecha) { this.fecha = fecha; }
}

// Estructura para Historial Médico
class HistorialMedico {
    private String consulta;
    private TipoHistorial tipo;
    private Date fecha;
    private String diagnostico;
    private String tratamiento;
    private List<Imagen> imagenes;
    
    public HistorialMedico(String consulta, TipoHistorial tipo, Date fecha, String diagnostico, String tratamiento) {
        this.consulta = consulta;
        this.tipo = tipo;
        this.fecha = fecha;
        this.diagnostico = diagnostico;
        this.tratamiento = tratamiento;
        this.imagenes = new ArrayList<>();
    }
    
    // Getters y setters
    public String getConsulta() { return consulta; }
    public void setConsulta(String consulta) { this.consulta = consulta; }
    public TipoHistorial getTipo() { return tipo; }
    public void setTipo(TipoHistorial tipo) { this.tipo = tipo; }
    public Date getFecha() { return fecha; }
    public void setFecha(Date fecha) { this.fecha = fecha; }
    public String getDiagnostico() { return diagnostico; }
    public void setDiagnostico(String diagnostico) { this.diagnostico = diagnostico; }
    public String getTratamiento() { return tratamiento; }
    public void setTratamiento(String tratamiento) { this.tratamiento = tratamiento; }
    public List<Imagen> getImagenes() { return imagenes; }
    public void setImagenes(List<Imagen> imagenes) { this.imagenes = imagenes; }
}

// Estructura para Turnos
class Turnos {
    private String dia;
    private String hora;
    private String modalidad;
    private int años;
    private int meses;
    
    public Turnos(String dia, String hora, String modalidad, int años, int meses) {
        this.dia = dia;
        this.hora = hora;
        this.modalidad = modalidad;
        this.años = años;
        this.meses = meses;
    }
    
    // Getters y setters
    public String getDia() { return dia; }
    public void setDia(String dia) { this.dia = dia; }
    public String getHora() { return hora; }
    public void setHora(String hora) { this.hora = hora; }
    public String getModalidad() { return modalidad; }
    public void setModalidad(String modalidad) { this.modalidad = modalidad; }
    public int getAños() { return años; }
    public void setAños(int años) { this.años = años; }
    public int getMeses() { return meses; }
    public void setMeses(int meses) { this.meses = meses; }
}

// ============ CLASES AUXILIARES ============

class Examen {
    private String id;
    private String tipo;
    private Date fecha;
    private String resultado;
    private String pacienteId;
    
    public Examen(String id, String tipo, Date fecha, String resultado, String pacienteId) {
        this.id = id;
        this.tipo = tipo;
        this.fecha = fecha;
        this.resultado = resultado;
        this.pacienteId = pacienteId;
    }
    
    // Getters y setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    public String getTipo() { return tipo; }
    public void setTipo(String tipo) { this.tipo = tipo; }
    public Date getFecha() { return fecha; }
    public void setFecha(Date fecha) { this.fecha = fecha; }
    public String getResultado() { return resultado; }
    public void setResultado(String resultado) { this.resultado = resultado; }
    public String getPacienteId() { return pacienteId; }
    public void setPacienteId(String pacienteId) { this.pacienteId = pacienteId; }
}

class Receta {
    private String id;
    private String medicamento;
    private String dosis;
    private String frecuencia;
    private Date fecha;
    private String pacienteId;
    private String medicoId;
    
    public Receta(String id, String medicamento, String dosis, String frecuencia, Date fecha, String pacienteId, String medicoId) {
        this.id = id;
        this.medicamento = medicamento;
        this.dosis = dosis;
        this.frecuencia = frecuencia;
        this.fecha = fecha;
        this.pacienteId = pacienteId;
        this.medicoId = medicoId;
    }
    
    // Getters y setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    public String getMedicamento() { return medicamento; }
    public void setMedicamento(String medicamento) { this.medicamento = medicamento; }
    public String getDosis() { return dosis; }
    public void setDosis(String dosis) { this.dosis = dosis; }
    public String getFrecuencia() { return frecuencia; }
    public void setFrecuencia(String frecuencia) { this.frecuencia = frecuencia; }
    public Date getFecha() { return fecha; }
    public void setFecha(Date fecha) { this.fecha = fecha; }
    public String getPacienteId() { return pacienteId; }
    public void setPacienteId(String pacienteId) { this.pacienteId = pacienteId; }
    public String getMedicoId() { return medicoId; }
    public void setMedicoId(String medicoId) { this.medicoId = medicoId; }
}

class Inventario {
    private List<String> medicamentos;
    private List<String> equipoMedico;
    private List<String> suministros;
    
    public Inventario() {
        this.medicamentos = new ArrayList<>();
        this.equipoMedico = new ArrayList<>();
        this.suministros = new ArrayList<>();
    }
    
    // Getters y setters
    public List<String> getMedicamentos() { return medicamentos; }
    public void setMedicamentos(List<String> medicamentos) { this.medicamentos = medicamentos; }
    public List<String> getEquipoMedico() { return equipoMedico; }
    public void setEquipoMedico(List<String> equipoMedico) { this.equipoMedico = equipoMedico; }
    public List<String> getSuministros() { return suministros; }
    public void setSuministros(List<String> suministros) { this.suministros = suministros; }
}

class AtencionMedica {
    private String id;
    private Date fecha;
    private String pacienteId;
    private String medicoId;
    private String descripcion;
    
    public AtencionMedica(String id, Date fecha, String pacienteId, String medicoId, String descripcion) {
        this.id = id;
        this.fecha = fecha;
        this.pacienteId = pacienteId;
        this.medicoId = medicoId;
        this.descripcion = descripcion;
    }
    
    // Getters y setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    public Date getFecha() { return fecha; }
    public void setFecha(Date fecha) { this.fecha = fecha; }
    public String getPacienteId() { return pacienteId; }
    public void setPacienteId(String pacienteId) { this.pacienteId = pacienteId; }
    public String getMedicoId() { return medicoId; }
    public void setMedicoId(String medicoId) { this.medicoId = medicoId; }
    public String getDescripcion() { return descripcion; }
    public void setDescripcion(String descripcion) { this.descripcion = descripcion; }
}

class Consulta {
    private String id;
    private Date fecha;
    private String pacienteId;
    private String medicoId;
    private String motivo;
    private String diagnostico;
    
    public Consulta(String id, Date fecha, String pacienteId, String medicoId, String motivo) {
        this.id = id;
        this.fecha = fecha;
        this.pacienteId = pacienteId;
        this.medicoId = medicoId;
        this.motivo = motivo;
    }
    
    // Getters y setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    public Date getFecha() { return fecha; }
    public void setFecha(Date fecha) { this.fecha = fecha; }
    public String getPacienteId() { return pacienteId; }
    public void setPacienteId(String pacienteId) { this.pacienteId = pacienteId; }
    public String getMedicoId() { return medicoId; }
    public void setMedicoId(String medicoId) { this.medicoId = medicoId; }
    public String getMotivo() { return motivo; }
    public void setMotivo(String motivo) { this.motivo = motivo; }
    public String getDiagnostico() { return diagnostico; }
    public void setDiagnostico(String diagnostico) { this.diagnostico = diagnostico; }
}

// ============ CLASES PRINCIPALES ============

// Clase Cita
class Cita {
    private Date fecha;
    private Medico medico;
    private Paciente paciente;
    private LocalTime duracion;
    private String estado;
    
    public Cita(Date fecha, Medico medico, Paciente paciente, LocalTime duracion, String estado) {
        this.fecha = fecha;
        this.medico = medico;
        this.paciente = paciente;
        this.duracion = duracion;
        this.estado = estado;
    }
    
    // Getters y setters
    public Date getFecha() { return fecha; }
    public void setFecha(Date fecha) { this.fecha = fecha; }
    public Medico getMedico() { return medico; }
    public void setMedico(Medico medico) { this.medico = medico; }
    public Paciente getPaciente() { return paciente; }
    public void setPaciente(Paciente paciente) { this.paciente = paciente; }
    public LocalTime getDuracion() { return duracion; }
    public void setDuracion(LocalTime duracion) { this.duracion = duracion; }
    public String getEstado() { return estado; }
    public void setEstado(String estado) { this.estado = estado; }
}

// Clase Infraestructura
class Infraestructura {
    private String id;
    private TipoInfraestructura tipo;
    private int numero;
    private boolean desinfectado;
    
    public Infraestructura(String id, TipoInfraestructura tipo, int numero, boolean desinfectado) {
        this.id = id;
        this.tipo = tipo;
        this.numero = numero;
        this.desinfectado = desinfectado;
    }
    
    // Getters y setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    public TipoInfraestructura getTipo() { return tipo; }
    public void setTipo(TipoInfraestructura tipo) { this.tipo = tipo; }
    public int getNumero() { return numero; }
    public void setNumero(int numero) { this.numero = numero; }
    public boolean isDesinfectado() { return desinfectado; }
    public void setDesinfectado(boolean desinfectado) { this.desinfectado = desinfectado; }
}

// Clase abstracta Personal
abstract class Personal {
    protected String id;
    protected String nombre;
    protected String email;
    protected String telefono;
    protected String cargo;
    protected Turnos turno;
    
    public Personal(String id, String nombre, String email, String telefono, String cargo) {
        this.id = id;
        this.nombre = nombre;
        this.email = email;
        this.telefono = telefono;
        this.cargo = cargo;
    }
    
    // Getters y setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    public String getNombre() { return nombre; }
    public void setNombre(String nombre) { this.nombre = nombre; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    public String getTelefono() { return telefono; }
    public void setTelefono(String telefono) { this.telefono = telefono; }
    public String getCargo() { return cargo; }
    public void setCargo(String cargo) { this.cargo = cargo; }
    public Turnos getTurno() { return turno; }
    public void setTurno(Turnos turno) { this.turno = turno; }
}

// Clase Paciente
class Paciente {
    private String id;
    private String dni;
    private String nombre;
    private String apellidos;
    private Genero genero;
    private String email;
    private int telefono;
    private String direccion;
    private String obraSocial;
    private HistorialMedico historialMedico;
    private boolean hospitalizado;
    
    public Paciente(String dni, String nombre, String apellidos, Genero genero, int telefono, String email, String obraSocial, HistorialMedico historialMedico, boolean hospitalizado) {
        this.id = "PAC_" + System.currentTimeMillis(); // ID único
        this.dni = dni;
        this.nombre = nombre;
        this.apellidos = apellidos;
        this.genero = genero;
        this.telefono = telefono;
        this.email = email;
        this.obraSocial = obraSocial;
        this.historialMedico = historialMedico;
        this.hospitalizado = hospitalizado;
    }
    
    // Métodos específicos del paciente
    public HistorialMedico consultarHistorial(String id) {
        // Buscar historial por ID
        return this.historialMedico;
    }
    
    public boolean verEstadoCita(Cita c) {
        return c.getEstado().equals("Confirmada");
    }
    
    public boolean cancelarCita(Cita c) {
        c.setEstado("Cancelada");
        return true;
    }
    
    public Cita solicitarCita() {
        // Lógica para solicitar cita - retorna nueva cita
        return new Cita(new Date(), null, this, LocalTime.now(), "Pendiente");
    }
    
    public List<Examen> consultarExamenes() {
        // Retorna lista de exámenes del paciente
        return new ArrayList<Examen>();
    }
    
    public Receta verReceta(String id) {
        // Buscar receta por ID
        return null;
    }
    
    // Getters y setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    public String getDni() { return dni; }
    public void setDni(String dni) { this.dni = dni; }
    public String getNombre() { return nombre; }
    public void setNombre(String nombre) { this.nombre = nombre; }
    public String getApellidos() { return apellidos; }
    public void setApellidos(String apellidos) { this.apellidos = apellidos; }
    public Genero getGenero() { return genero; }
    public void setGenero(Genero genero) { this.genero = genero; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    public int getTelefono() { return telefono; }
    public void setTelefono(int telefono) { this.telefono = telefono; }
    public String getDireccion() { return direccion; }
    public void setDireccion(String direccion) { this.direccion = direccion; }
    public String getObraSocial() { return obraSocial; }
    public void setObraSocial(String obraSocial) { this.obraSocial = obraSocial; }
    public HistorialMedico getHistorialMedico() { return historialMedico; }
    public void setHistorialMedico(HistorialMedico historialMedico) { this.historialMedico = historialMedico; }
    public boolean isHospitalizado() { return hospitalizado; }
    public void setHospitalizado(boolean hospitalizado) { this.hospitalizado = hospitalizado; }
}

// Clase Enfermero
class Enfermero extends Personal {
    
    public Enfermero(String id, String nombre, String email, String telefono) {
        super(id, nombre, email, telefono, "Enfermero");
    }
    
    public String consultarDiagnostico(String id) {
        // Buscar diagnóstico por ID del paciente
        return "Diagnóstico encontrado para paciente: " + id;
    }
    
    public boolean asignarMedicacion(String id) {
        // Asignar medicación al paciente
        System.out.println("Medicación asignada al paciente: " + id);
        return true;
    }
    
    public boolean registrarPaciente(Paciente p) {
        // Registrar paciente en el sistema
        HospitalLoginUi.listaPacientes.add(p);
        return true;
    }
    
    public HistorialMedico consultarHistorialMedico(String id) {
        // Buscar historial médico por ID
        for (Paciente p : HospitalLoginUi.listaPacientes) {
            if (p.getId().equals(id)) {
                return p.getHistorialMedico();
            }
        }
        return null;
    }
    
    public void recibirPaciente(Paciente p) {
        System.out.println("Paciente recibido: " + p.getNombre() + " " + p.getApellidos());
    }
}

// Clase Medico
class Medico extends Personal {
    private String especialidad;
    
    public Medico(String id, String nombre, String email, String telefono, String especialidad) {
        super(id, nombre, email, telefono, "Médico");
        this.especialidad = especialidad;
    }
    
    public Cita asignarCita(Paciente p) {
        return new Cita(new Date(), this, p, LocalTime.of(1, 0), "Programada");
    }
    
    public String crearDiagnostico(String id, String informe) {
        return "Diagnóstico creado para paciente " + id + ": " + informe;
    }
    
    public HistorialMedico registrarHistorial(String id) {
        return new HistorialMedico("Consulta médica", TipoHistorial.CONSULTA, new Date(), "", "");
    }
    
    public HistorialMedico consultarHistorial(String id) {
        for (Paciente p : HospitalLoginUi.listaPacientes) {
            if (p.getId().equals(id)) {
                return p.getHistorialMedico();
            }
        }
        return null;
    }
    
    public void recetarMedicacion(String id) {
        System.out.println("Medicación recetada para paciente: " + id);
    }
    
    public void actualizarEstadoCita(Cita c) {
        c.setEstado("Completada");
    }
    
    public void pedirExamenes(Paciente p) {
        System.out.println("Exámenes solicitados para: " + p.getNombre());
    }
    
    // Getters y setters
    public String getEspecialidad() { return especialidad; }
    public void setEspecialidad(String especialidad) { this.especialidad = especialidad; }
}

// Clase Mantenimiento
class Mantenimiento extends Personal {
    
    public Mantenimiento(String id, String nombre, String email, String telefono) {
        super(id, nombre, email, telefono, "Mantenimiento");
    }
    
    public boolean programarDesinfeccion(Infraestructura infraestructura) {
        infraestructura.setDesinfectado(true);
        System.out.println("Desinfección programada para: " + infraestructura.getId());
        return true;
    }
}

// Clase Administrativos
class Administrativos extends Personal {
    
    public Administrativos(String id, String nombre, String email, String telefono) {
        super(id, nombre, email, telefono, "Administrativo");
    }
    
    public void consultarAgenda(Infraestructura infraestructura) {
        System.out.println("Consultando agenda para: " + infraestructura.getId());
    }
    
    public void consultarPersonal(Personal personal) {
        System.out.println("Consultando información de: " + personal.getNombre());
    }
    
    public void consultarRecetas(Receta receta) {
        System.out.println("Consultando receta: " + receta.getId());
    }
    
    public void registrarPaciente(Paciente paciente) {
        HospitalLoginUi.listaPacientes.add(paciente);
        System.out.println("Paciente registrado: " + paciente.getNombre());
    }
    
    public boolean crearCitas(Paciente paciente, Medico medico, TipoInfraestructura tipo) {
        Cita nuevaCita = new Cita(new Date(), medico, paciente, LocalTime.of(1, 0), "Programada");
        System.out.println("Cita creada para " + paciente.getNombre() + " con " + medico.getNombre());
        return true;
    }
}

// Clase abstracta Administradores
abstract class Administradores {
    protected String id;
    protected String email;
    protected String contrasena;
    
    public Administradores(String id, String email, String contrasena) {
        this.id = id;
        this.email = email;
        this.contrasena = contrasena;
    }
    
    public void registrarAdministrador(Administradores admin) {
        System.out.println("Administrador registrado: " + admin.getId());
    }
    
    public List<Turnos> filtrarTurnos(Date fecha) {
        return new ArrayList<Turnos>();
    }
    
    public void notificarPersonal(String msg) {
        System.out.println("Notificación enviada: " + msg);
    }
    
    public Inventario consultarInventario() {
        return new Inventario();
    }
    
    public List<AtencionMedica> visualizarAtencionMedica(Medico medico) {
        return new ArrayList<AtencionMedica>();
    }
    
    public void eliminarPersonal(String id) {
        System.out.println("Personal eliminado: " + id);
    }
    
    public void modificarPersonal(String id) {
        System.out.println("Personal modificado: " + id);
    }
    
    public void registrarSala(TipoInfraestructura tipo) {
        System.out.println("Sala registrada: " + tipo);
    }
    
    public void eliminarSala(String id) {
        System.out.println("Sala eliminada: " + id);
    }
    
    public void modificarSala(String id) {
        System.out.println("Sala modificada: " + id);
    }
    
    public void consultarHistorial(String id) {
        System.out.println("Consultando historial: " + id);
    }
    
    public List<Consulta> filtrarConsultas(Medico medico) {
        return new ArrayList<Consulta>();
    }
    
    public void registrarTurno(int num, String dia, String hora) {
        System.out.println("Turno registrado: " + num + " - " + dia + " " + hora);
    }
    
    // Getters y setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    public String getContrasena() { return contrasena; }
    public void setContrasena(String contrasena) { this.contrasena = contrasena; }
}

// Implementación concreta de Administrador
class AdministradorSistema extends Administradores {
    
    public AdministradorSistema(String id, String email, String contrasena) {
        super(id, email, contrasena);
    }
}

// ============ CLASE PRINCIPAL UI (MODIFICADA) ============

public class HospitalLoginUi {
    static List<Paciente> listaPacientes = new ArrayList<>();
    static List<Personal> listaPersonal = new ArrayList<>(); // Cambiado de String a Personal
    static List<Infraestructura> listaSalas = new ArrayList<>(); // Cambiado de String a Infraestructura
    static List<Cita> listaCitas = new ArrayList<>();
    static List<Receta> listaRecetas = new ArrayList<>();
    static List<Examen> listaExamenes = new ArrayList<>();

    public static void main(String[] args) {
        // Inicializar datos de ejemplo
        inicializarDatos();
        mostrarLogin();
    }
    
    private static void inicializarDatos() {
        // Crear algunos empleados de ejemplo
        listaPersonal.add(new Medico("MED001", "Dr. García", "garcia@hospital.com", "123456789", "Cardiología"));
        listaPersonal.add(new Enfermero("ENF001", "Ana López", "ana@hospital.com", "987654321"));
        listaPersonal.add(new Administrativos("ADM001", "Carlos Ruiz", "carlos@hospital.com", "555666777"));
        listaPersonal.add(new Mantenimiento("MAN001", "José Pérez", "jose@hospital.com", "111222333"));
        
        // Crear algunas salas de ejemplo
        listaSalas.add(new Infraestructura("SALA001", TipoInfraestructura.CONSULTORIO, 101, true));
        listaSalas.add(new Infraestructura("SALA002", TipoInfraestructura.HABITACION, 201, false));
        listaSalas.add(new Infraestructura("SALA003", TipoInfraestructura.QUIROFANO, 301, true));
    }

    public static void mostrarLogin() {
        JFrame frame = new JFrame("Login Hospital");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);
        frame.setLocationRelativeTo(null);
        frame.setLayout(new BorderLayout());

        Color fondo = new Color(245, 245, 245);
        Color btnColor = new Color(33, 150, 243);
        Color txtBtn = Color.WHITE;
        Font fuente = new Font("Arial", Font.PLAIN, 14);

        JPanel panel = new JPanel(new GridLayout(4, 2, 10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(40, 40, 10, 40));
        panel.setBackground(fondo);

        JLabel usuarioLabel = new JLabel("Usuario:");
        JTextField usuarioField = new JTextField();
        JLabel passwordLabel = new JLabel("Contraseña:");
        JPasswordField passwordField = new JPasswordField();
        JLabel rolLabel = new JLabel("Rol:");
        String[] roles = {"Administrador", "Doctor", "Recepcionista"};
        JComboBox<String> rolBox = new JComboBox<>(roles);

        panel.add(usuarioLabel);
        panel.add(usuarioField);
        panel.add(passwordLabel);
        panel.add(passwordField);
        panel.add(rolLabel);
        panel.add(rolBox);
        panel.add(new JLabel());
        panel.add(new JLabel());

        frame.add(panel, BorderLayout.CENTER);

        JButton loginBtn = new JButton("Entrar");
        loginBtn.setFont(fuente);
        loginBtn.setBackground(btnColor);
        loginBtn.setForeground(txtBtn);

        JPanel botonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        botonPanel.setBorder(BorderFactory.createEmptyBorder(0, 40, 40, 40));
        botonPanel.setBackground(fondo);
        botonPanel.add(loginBtn);
        frame.add(botonPanel, BorderLayout.SOUTH);

        loginBtn.addActionListener(e -> {
            String usuario = usuarioField.getText();
            String password = new String(passwordField.getPassword());
            String rolSeleccionado = (String) rolBox.getSelectedItem();

            if (usuario.isEmpty() || password.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "Debe ingresar usuario y contraseña.", "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            frame.dispose();
            menuPrincipal(rolSeleccionado);
            JOptionPane.showMessageDialog(null, "Acceso realizado con éxito.\nUsuario: " + usuario);
        });

        frame.getContentPane().setBackground(fondo);
        frame.setVisible(true);
    }

    public static void menuPrincipal(String rol) {
        JFrame frame = new JFrame("Menú Principal - Rol: " + rol);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500, 400);
        frame.setLocationRelativeTo(null);

        JPanel panel = new JPanel(new GridLayout(0, 1, 10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        if (rol.equals("Administrador") || rol.equals("Doctor")) {
            JButton btnPacientes = new JButton("Gestión de Pacientes");
            btnPacientes.addActionListener(e -> gestionPacientes(rol));
            panel.add(btnPacientes);
        }

        if (rol.equals("Administrador") || rol.equals("Recepcionista")) {
            JButton btnEmpleados = new JButton("Gestión de Empleados");
            btnEmpleados.addActionListener(e -> gestionEmpleados(rol));
            panel.add(btnEmpleados);
        }

        if (rol.equals("Administrador")) {
            JButton btnSalas = new JButton("Gestión de Salas");
            btnSalas.addActionListener(e -> gestionSalas(rol));
            panel.add(btnSalas);
            
            JButton btnCitas = new JButton("Gestión de Citas");
            btnCitas.addActionListener(e -> gestionCitas(rol));
            panel.add(btnCitas);
            
            JButton btnInventario = new JButton("Consultar Inventario");
            btnInventario.addActionListener(e -> consultarInventario());
            panel.add(btnInventario);
        }

        if (rol.equals("Doctor")) {
            JButton btnHistoriales = new JButton("Historiales Médicos");
            btnHistoriales.addActionListener(e -> gestionHistoriales());
            panel.add(btnHistoriales);
            
            JButton btnRecetas = new JButton("Gestión de Recetas");
            btnRecetas.addActionListener(e -> gestionRecetas());
            panel.add(btnRecetas);
        }

        JButton btnCerrarSesion = new JButton("Cerrar Sesión");
        btnCerrarSesion.addActionListener(e -> {
            frame.dispose();
            mostrarLogin();
        });
        panel.add(btnCerrarSesion);

        frame.add(panel);
        frame.setVisible(true);
    }

    public static void gestionPacientes(String rol) {
        JFrame frame = new JFrame("Gestión de Pacientes - " + rol);
        frame.setSize(500, 400);
        frame.setLocationRelativeTo(null);
        frame.setLayout(new GridLayout(6, 1, 10, 10));

        JButton btnRegistrar = new JButton("Registrar Paciente");
        btnRegistrar.addActionListener(e -> registrarPaciente());

        JButton btnListar = new JButton("Listar Pacientes");
        btnListar.addActionListener(e -> listarPacientes());

        JButton btnHistorial = new JButton("Consultar Historial Médico");
        btnHistorial.addActionListener(e -> consultarHistorialPaciente());

        JButton btnHabitaciones = new JButton("Asignación de Habitaciones");
        btnHabitaciones.addActionListener(e -> asignarHabitacion());

        JButton btnSolicitudes = new JButton("Solicitudes de Atención Médica");
        btnSolicitudes.addActionListener(e -> solicitudesAtencion());

        JButton btnVolver = new JButton("Volver al Menú Principal");
        btnVolver.addActionListener(e -> {
            frame.dispose();
            menuPrincipal(rol);
        });

        frame.add(btnRegistrar);
        frame.add(btnListar);
        frame.add(btnHistorial);
        frame.add(btnHabitaciones);
        frame.add(btnSolicitudes);
        frame.add(btnVolver);

        frame.setVisible(true);
    }

    public static void registrarPaciente() {
        JFrame frame = new JFrame("Registro de Paciente");
        frame.setSize(600, 500);
        frame.setLocationRelativeTo(null);
        frame.setLayout(new BorderLayout());

        String[] labels = {"DNI", "Nombre", "Apellidos", "Género (M/F/O)", "Teléfono", "Email", "Dirección", "Obra Social"};
        JTextField[] fields = new JTextField[labels.length];

        JPanel form = new JPanel(new GridLayout(labels.length, 2, 5, 5));
        form.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        for (int i = 0; i < labels.length; i++) {
            form.add(new JLabel(labels[i] + ":"));
            fields[i] = new JTextField();
            form.add(fields[i]);
        }

        JButton btnGuardar = new JButton("Registrar Paciente");
        btnGuardar.addActionListener(e -> {
            try {
                String dni = fields[0].getText();
                String nombre = fields[1].getText();
                String apellidos = fields[2].getText();
                String generoStr = fields[3].getText().toUpperCase();
                Genero genero;
                switch (generoStr) {
                    case "M": genero = Genero.MASCULINO; break;
                    case "F": genero = Genero.FEMENINO; break;
                    default: genero = Genero.OTRO; break;
                }
                int telefono = Integer.parseInt(fields[4].getText());
                String email = fields[5].getText();
                String direccion = fields[6].getText();
                String obraSocial = fields[7].getText();

                // Crear historial médico inicial
                HistorialMedico historial = new HistorialMedico("Registro inicial", TipoHistorial.CONSULTA, new Date(), "", "");

                Paciente nuevo = new Paciente(dni, nombre, apellidos, genero, telefono, email, obraSocial, historial, false);
                nuevo.setDireccion(direccion);
                listaPacientes.add(nuevo);

                JOptionPane.showMessageDialog(frame, "Paciente registrado correctamente.\nID: " + nuevo.getId());
                for (JTextField field : fields) field.setText("");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(frame, "Error al registrar paciente: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        frame.add(form, BorderLayout.CENTER);
        frame.add(btnGuardar, BorderLayout.SOUTH);
        frame.setVisible(true);
    }

    public static void listarPacientes() {
        JFrame frame = new JFrame("Lista de Pacientes");
        frame.setSize(800, 600);
        frame.setLocationRelativeTo(null);

        String[] columnNames = {"ID", "DNI", "Nombre", "Apellidos", "Género", "Teléfono", "Email", "Obra Social"};
        Object[][] data = new Object[listaPacientes.size()][columnNames.length];

        for (int i = 0; i < listaPacientes.size(); i++) {
            Paciente p = listaPacientes.get(i);
            data[i][0] = p.getId();
            data[i][1] = p.getDni();
            data[i][2] = p.getNombre();
            data[i][3] = p.getApellidos();
            data[i][4] = p.getGenero();
            data[i][5] = p.getTelefono();
            data[i][6] = p.getEmail();
            data[i][7] = p.getObraSocial();
        }

        JTable table = new JTable(data, columnNames);
        JScrollPane scrollPane = new JScrollPane(table);
        frame.add(scrollPane);
        frame.setVisible(true);
    }

    public static void consultarHistorialPaciente() {
        String id = JOptionPane.showInputDialog("Ingrese el ID del paciente:");
        if (id != null && !id.isEmpty()) {
            for (Paciente p : listaPacientes) {
                if (p.getId().equals(id)) {
                    HistorialMedico historial = p.getHistorialMedico();
                    if (historial != null) {
                        String info = "Paciente: " + p.getNombre() + " " + p.getApellidos() + "\n" +
                                     "Consulta: " + historial.getConsulta() + "\n" +
                                     "Tipo: " + historial.getTipo() + "\n" +
                                     "Fecha: " + historial.getFecha() + "\n" +
                                     "Diagnóstico: " + historial.getDiagnostico() + "\n" +
                                     "Tratamiento: " + historial.getTratamiento();
                        JOptionPane.showMessageDialog(null, info, "Historial Médico", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "No hay historial médico disponible para este paciente.");
                    }
                    return;
                }
            }
            JOptionPane.showMessageDialog(null, "Paciente no encontrado.");
        }
    }

    public static void asignarHabitacion() {
        String pacienteId = JOptionPane.showInputDialog("Ingrese el ID del paciente:");
        if (pacienteId != null && !pacienteId.isEmpty()) {
            // Mostrar habitaciones disponibles
            StringBuilder habitaciones = new StringBuilder("Habitaciones disponibles:\n");
            for (Infraestructura sala : listaSalas) {
                if (sala.getTipo() == TipoInfraestructura.HABITACION) {
                    habitaciones.append("ID: ").append(sala.getId())
                               .append(" - Número: ").append(sala.getNumero())
                               .append(" - Desinfectada: ").append(sala.isDesinfectado() ? "Sí" : "No")
                               .append("\n");
                }
            }
            
            String salaId = JOptionPane.showInputDialog(habitaciones.toString() + "\nIngrese el ID de la habitación:");
            if (salaId != null) {
                JOptionPane.showMessageDialog(null, "Habitación " + salaId + " asignada al paciente " + pacienteId);
            }
        }
    }

    public static void solicitudesAtencion() {
        JFrame frame = new JFrame("Solicitudes de Atención Médica");
        frame.setSize(600, 400);
        frame.setLocationRelativeTo(null);
        frame.setLayout(new BorderLayout());

        String[] labels = {"ID Paciente", "Tipo de Atención", "Prioridad (Alta/Media/Baja)", "Observaciones"};
        JTextField[] fields = new JTextField[labels.length];

        JPanel form = new JPanel(new GridLayout(labels.length, 2, 5, 5));
        form.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        for (int i = 0; i < labels.length; i++) {
            form.add(new JLabel(labels[i] + ":"));
            fields[i] = new JTextField();
            form.add(fields[i]);
        }

        JButton btnCrear = new JButton("Crear Solicitud");
        btnCrear.addActionListener(e -> {
            String pacienteId = fields[0].getText();
            String tipoAtencion = fields[1].getText();
            String prioridad = fields[2].getText();
            String observaciones = fields[3].getText();

            if (!pacienteId.isEmpty() && !tipoAtencion.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "Solicitud de atención creada correctamente para el paciente: " + pacienteId);
                for (JTextField field : fields) field.setText("");
            } else {
                JOptionPane.showMessageDialog(frame, "Debe completar al menos el ID del paciente y el tipo de atención.");
            }
        });

        frame.add(form, BorderLayout.CENTER);
        frame.add(btnCrear, BorderLayout.SOUTH);
        frame.setVisible(true);
    }

    public static void gestionEmpleados(String rol) {
        JFrame frame = new JFrame("Gestión de Empleados - " + rol);
        frame.setSize(500, 400);
        frame.setLocationRelativeTo(null);
        frame.setLayout(new GridLayout(5, 1, 10, 10));

        JButton btnRegistrar = new JButton("Registrar Empleado");
        btnRegistrar.addActionListener(e -> registrarEmpleado());

        JButton btnListar = new JButton("Listar Empleados");
        btnListar.addActionListener(e -> listarEmpleados());

        JButton btnModificar = new JButton("Modificar Empleado");
        btnModificar.addActionListener(e -> modificarEmpleado());

        JButton btnEliminar = new JButton("Eliminar Empleado");
        btnEliminar.addActionListener(e -> eliminarEmpleado());

        JButton btnVolver = new JButton("Volver al Menú Principal");
        btnVolver.addActionListener(e -> {
            frame.dispose();
            menuPrincipal(rol);
        });

        frame.add(btnRegistrar);
        frame.add(btnListar);
        frame.add(btnModificar);
        frame.add(btnEliminar);
        frame.add(btnVolver);

        frame.setVisible(true);
    }

    public static void registrarEmpleado() {
        JFrame frame = new JFrame("Registro de Empleado");
        frame.setSize(600, 400);
        frame.setLocationRelativeTo(null);
        frame.setLayout(new BorderLayout());

        String[] labels = {"ID Empleado", "Nombre", "Email", "Teléfono", "Cargo", "Especialidad (solo para médicos)"};
        JTextField[] fields = new JTextField[labels.length];
        JPanel form = new JPanel(new GridLayout(labels.length, 2, 5, 5));
        form.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        for (int i = 0; i < labels.length; i++) {
            form.add(new JLabel(labels[i] + ":"));
            fields[i] = new JTextField();
            form.add(fields[i]);
        }

        JButton btnGuardar = new JButton("Registrar Empleado");
        btnGuardar.addActionListener(e -> {
            String id = fields[0].getText();
            String nombre = fields[1].getText();
            String email = fields[2].getText();
            String telefono = fields[3].getText();
            String cargo = fields[4].getText();
            String especialidad = fields[5].getText();

            if (id.isEmpty() || nombre.isEmpty() || email.isEmpty() || telefono.isEmpty() || cargo.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "Todos los campos obligatorios deben ser completados.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Personal nuevoEmpleado;
            switch (cargo.toLowerCase()) {
                case "medico":
                case "médico":
                case "doctor":
                    nuevoEmpleado = new Medico(id, nombre, email, telefono, especialidad.isEmpty() ? "General" : especialidad);
                    break;
                case "enfermero":
                case "enfermera":
                    nuevoEmpleado = new Enfermero(id, nombre, email, telefono);
                    break;
                case "administrativo":
                case "administrativa":
                    nuevoEmpleado = new Administrativos(id, nombre, email, telefono);
                    break;
                case "mantenimiento":
                    nuevoEmpleado = new Mantenimiento(id, nombre, email, telefono);
                    break;
                default:
                    nuevoEmpleado = new Administrativos(id, nombre, email, telefono); // Por defecto
                    break;
            }

            listaPersonal.add(nuevoEmpleado);
            JOptionPane.showMessageDialog(frame, "Empleado registrado correctamente.");
            for (JTextField field : fields) field.setText("");
        });

        frame.add(form, BorderLayout.CENTER);
        frame.add(btnGuardar, BorderLayout.SOUTH);
        frame.setVisible(true);
    }

    public static void listarEmpleados() {
        JFrame frame = new JFrame("Lista de Empleados");
        frame.setSize(800, 600);
        frame.setLocationRelativeTo(null);

        String[] columnNames = {"ID", "Nombre", "Email", "Teléfono", "Cargo", "Especialidad"};
        Object[][] data = new Object[listaPersonal.size()][columnNames.length];

        for (int i = 0; i < listaPersonal.size(); i++) {
            Personal p = listaPersonal.get(i);
            data[i][0] = p.getId();
            data[i][1] = p.getNombre();
            data[i][2] = p.getEmail();
            data[i][3] = p.getTelefono();
            data[i][4] = p.getCargo();
            data[i][5] = (p instanceof Medico) ? ((Medico) p).getEspecialidad() : "N/A";
        }

        JTable table = new JTable(data, columnNames);
        JScrollPane scrollPane = new JScrollPane(table);
        frame.add(scrollPane);
        frame.setVisible(true);
    }

    public static void modificarEmpleado() {
        String id = JOptionPane.showInputDialog("Ingrese el ID del empleado a modificar:");
        if (id != null && !id.isEmpty()) {
            for (Personal p : listaPersonal) {
                if (p.getId().equals(id)) {
                    String nuevoNombre = JOptionPane.showInputDialog("Nuevo nombre:", p.getNombre());
                    String nuevoEmail = JOptionPane.showInputDialog("Nuevo email:", p.getEmail());
                    String nuevoTelefono = JOptionPane.showInputDialog("Nuevo teléfono:", p.getTelefono());

                    if (nuevoNombre != null) p.setNombre(nuevoNombre);
                    if (nuevoEmail != null) p.setEmail(nuevoEmail);
                    if (nuevoTelefono != null) p.setTelefono(nuevoTelefono);

                    JOptionPane.showMessageDialog(null, "Empleado modificado correctamente.");
                    return;
                }
            }
            JOptionPane.showMessageDialog(null, "Empleado no encontrado.");
        }
    }

    public static void eliminarEmpleado() {
        String id = JOptionPane.showInputDialog("Ingrese el ID del empleado a eliminar:");
        if (id != null && !id.isEmpty()) {
            for (int i = 0; i < listaPersonal.size(); i++) {
                if (listaPersonal.get(i).getId().equals(id)) {
                    int confirmacion = JOptionPane.showConfirmDialog(null, 
                        "¿Está seguro de eliminar el empleado " + listaPersonal.get(i).getNombre() + "?",
                        "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
                    
                    if (confirmacion == JOptionPane.YES_OPTION) {
                        listaPersonal.remove(i);
                        JOptionPane.showMessageDialog(null, "Empleado eliminado correctamente.");
                    }
                    return;
                }
            }
            JOptionPane.showMessageDialog(null, "Empleado no encontrado.");
        }
    }

    public static void gestionSalas(String rol) {
        JFrame frame = new JFrame("Gestión de Salas - " + rol);
        frame.setSize(500, 400);
        frame.setLocationRelativeTo(null);
        frame.setLayout(new GridLayout(5, 1, 10, 10));

        JButton btnRegistrar = new JButton("Registrar Sala");
        btnRegistrar.addActionListener(e -> registrarSala());

        JButton btnListar = new JButton("Listar Salas");
        btnListar.addActionListener(e -> listarSalas());

        JButton btnModificar = new JButton("Modificar Sala");
        btnModificar.addActionListener(e -> modificarSala());

        JButton btnDesinfectar = new JButton("Programar Desinfección");
        btnDesinfectar.addActionListener(e -> programarDesinfeccion());

        JButton btnVolver = new JButton("Volver al Menú Principal");
        btnVolver.addActionListener(e -> {
            frame.dispose();
            menuPrincipal(rol);
        });

        frame.add(btnRegistrar);
        frame.add(btnListar);
        frame.add(btnModificar);
        frame.add(btnDesinfectar);
        frame.add(btnVolver);

        frame.setVisible(true);
    }

    public static void registrarSala() {
        JFrame frame = new JFrame("Registro de Sala");
        frame.setSize(500, 300);
        frame.setLocationRelativeTo(null);
        frame.setLayout(new BorderLayout());

        String[] labels = {"ID Sala", "Tipo (HABITACION/QUIROFANO/CONSULTORIO)", "Número"};
        JTextField[] fields = new JTextField[labels.length];
        JPanel form = new JPanel(new GridLayout(labels.length, 2, 5, 5));
        form.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        for (int i = 0; i < labels.length; i++) {
            form.add(new JLabel(labels[i] + ":"));
            fields[i] = new JTextField();
            form.add(fields[i]);
        }

        JButton btnGuardar = new JButton("Registrar Sala");
        btnGuardar.addActionListener(e -> {
            String id = fields[0].getText();
            String tipoStr = fields[1].getText().toUpperCase();
            String numeroStr = fields[2].getText();

            if (id.isEmpty() || tipoStr.isEmpty() || numeroStr.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "Todos los campos son obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                TipoInfraestructura tipo = TipoInfraestructura.valueOf(tipoStr);
                int numero = Integer.parseInt(numeroStr);

                Infraestructura nuevaSala = new Infraestructura(id, tipo, numero, false);
                listaSalas.add(nuevaSala);

                JOptionPane.showMessageDialog(frame, "Sala registrada correctamente.");
                for (JTextField field : fields) field.setText("");
            } catch (IllegalArgumentException ex) {
                JOptionPane.showMessageDialog(frame, "Tipo de sala inválido. Use: HABITACION, QUIROFANO, o CONSULTORIO", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(frame, "El número debe ser un valor numérico.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        frame.add(form, BorderLayout.CENTER);
        frame.add(btnGuardar, BorderLayout.SOUTH);
        frame.setVisible(true);
    }

    public static void listarSalas() {
        JFrame frame = new JFrame("Lista de Salas");
        frame.setSize(600, 400);
        frame.setLocationRelativeTo(null);

        String[] columnNames = {"ID", "Tipo", "Número", "Desinfectada"};
        Object[][] data = new Object[listaSalas.size()][columnNames.length];

        for (int i = 0; i < listaSalas.size(); i++) {
            Infraestructura s = listaSalas.get(i);
            data[i][0] = s.getId();
            data[i][1] = s.getTipo();
            data[i][2] = s.getNumero();
            data[i][3] = s.isDesinfectado() ? "Sí" : "No";
        }

        JTable table = new JTable(data, columnNames);
        JScrollPane scrollPane = new JScrollPane(table);
        frame.add(scrollPane);
        frame.setVisible(true);
    }

    public static void modificarSala() {
        String id = JOptionPane.showInputDialog("Ingrese el ID de la sala a modificar:");
        if (id != null && !id.isEmpty()) {
            for (Infraestructura s : listaSalas) {
                if (s.getId().equals(id)) {
                    String nuevoNumero = JOptionPane.showInputDialog("Nuevo número de sala:", s.getNumero());
                    
                    if (nuevoNumero != null && !nuevoNumero.isEmpty()) {
                        try {
                            s.setNumero(Integer.parseInt(nuevoNumero));
                            JOptionPane.showMessageDialog(null, "Sala modificada correctamente.");
                        } catch (NumberFormatException ex) {
                            JOptionPane.showMessageDialog(null, "El número debe ser un valor numérico.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    return;
                }
            }
            JOptionPane.showMessageDialog(null, "Sala no encontrada.");
        }
    }

    public static void programarDesinfeccion() {
        String id = JOptionPane.showInputDialog("Ingrese el ID de la sala para programar desinfección:");
        if (id != null && !id.isEmpty()) {
            for (Infraestructura s : listaSalas) {
                if (s.getId().equals(id)) {
                    // Simular personal de mantenimiento
                    Mantenimiento personal = new Mantenimiento("MAN001", "José Pérez", "jose@hospital.com", "111222333");
                    personal.programarDesinfeccion(s);
                    JOptionPane.showMessageDialog(null, "Desinfección programada para la sala: " + id);
                    return;
                }
            }
            JOptionPane.showMessageDialog(null, "Sala no encontrada.");
        }
    }

    public static void gestionCitas(String rol) {
        JFrame frame = new JFrame("Gestión de Citas - " + rol);
        frame.setSize(500, 400);
        frame.setLocationRelativeTo(null);
        frame.setLayout(new GridLayout(4, 1, 10, 10));

        JButton btnCrear = new JButton("Crear Cita");
        btnCrear.addActionListener(e -> crearCita());

        JButton btnListar = new JButton("Listar Citas");
        btnListar.addActionListener(e -> listarCitas());

        JButton btnActualizar = new JButton("Actualizar Estado de Cita");
        btnActualizar.addActionListener(e -> actualizarCita());

        JButton btnVolver = new JButton("Volver al Menú Principal");
        btnVolver.addActionListener(e -> {
            frame.dispose();
            menuPrincipal(rol);
        });

        frame.add(btnCrear);
        frame.add(btnListar);
        frame.add(btnActualizar);
        frame.add(btnVolver);

        frame.setVisible(true);
    }

    public static void crearCita() {
        JFrame frame = new JFrame("Crear Cita");
        frame.setSize(600, 400);
        frame.setLocationRelativeTo(null);
        frame.setLayout(new BorderLayout());

        String[] labels = {"ID Paciente", "ID Médico", "Fecha (dd/mm/yyyy)", "Hora (HH:mm)"};
        JTextField[] fields = new JTextField[labels.length];

        JPanel form = new JPanel(new GridLayout(labels.length, 2, 5, 5));
        form.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        for (int i = 0; i < labels.length; i++) {
            form.add(new JLabel(labels[i] + ":"));
            fields[i] = new JTextField();
            form.add(fields[i]);
        }

        JButton btnCrear = new JButton("Crear Cita");
        btnCrear.addActionListener(e -> {
            String pacienteId = fields[0].getText();
            String medicoId = fields[1].getText();
            String fechaStr = fields[2].getText();
            String horaStr = fields[3].getText();

            if (pacienteId.isEmpty() || medicoId.isEmpty() || fechaStr.isEmpty() || horaStr.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "Todos los campos son obligatorios.");
                return;
            }

            // Buscar paciente y médico
            Paciente paciente = null;
            Medico medico = null;

            for (Paciente p : listaPacientes) {
                if (p.getId().equals(pacienteId)) {
                    paciente = p;
                    break;
                }
            }

            for (Personal p : listaPersonal) {
                if (p.getId().equals(medicoId) && p instanceof Medico) {
                    medico = (Medico) p;
                    break;
                }
            }

            if (paciente == null) {
                JOptionPane.showMessageDialog(frame, "Paciente no encontrado.");
                return;
            }

            if (medico == null) {
                JOptionPane.showMessageDialog(frame, "Médico no